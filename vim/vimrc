set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles()

syntax on

set directory=$HOME/.vimtmp//,.  " Keep swap files in one location

set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
set shell=/bin/sh

" NERDTree
nnoremap <leader>d :NERDTreeToggle<Enter>

" CtrlP.vim
map <leader>t :CtrlP<Enter>
map <leader>T :CtrlPClearAllCaches<Enter>:CtrlP<Enter>
map <leader>] :CtrlPTag<Enter>
map <leader>b :CtrlPBuffer<Enter>
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$|\tags$|\node_modules$'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,tags

" colors
set t_Co=256
set background=dark
colorscheme tir_black
"colorscheme Tomorrow-Night

set visualbell                    " No beeping.
set history=1000                  " Store a lot of history
set number                        " Turn on line numbers
set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs
set smarttab                      " sw at start of line, sts everywhere else
set autoread                      " Reload files changed outside vim
set autoindent

set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby

let Tlist_Ctags_Cmd = '/usr/local/Cellar/ctags/5.8/bin/ctags'
set tags+=gems.tags

" Indentation
set list listchars=tab:\ \ ,trail:Â·
set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

" Zen Coding Settings
let g:user_zen_expandabbr_key = '<c-e>'
let g:use_zen_complete_tag = 1

  " Fast window resizing with +/- keys (horizontal); / and * keys (vertical)
if bufwinnr(1)
  map <kPlus> <C-W>+
  map <kMinus> <C-W>-
  map <kDivide> <c-w><
  map <kMultiply> <c-w>>

  " Maps Alt-[h,j,k,l] to resizing a window split
  map  <A-h> <C-w><
  map  <A-j> <C-W>-
  map  <A-k> <C-W>+
  map  <A-l> <C-w>>
  " Maps Alt-[s.v] to horizontal and vertical split respectively
  map  <A-s> :split<CR>
  map  <A-v> :vsplit<CR>
  " Maps Alt-[n,p] for moving next and previous window respectively
  map  <A-n> <C-w><C-w>
  map  <A-p> <C-w><S-w>

endif

" Tab Settings
map tn :tabnew<cr>
map th :tabprevious<cr>
map tl :tabnext<cr>
map tt :tabnext <cr>
map tx :tabclose<cr>

" power line
let g:Powerline_symbols = 'fancy'

" auto remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set incsearch        "Find the next match as we type the search
set hlsearch         "Hilight searches by default

:nnoremap <CR> :nohlsearch<cr>  " Clear the search buffer when hitting return

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Helpful shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>P :silent !touch tmp/restart.txt<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Running tests
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    elseif match(a:filename, 'Test\.php$') != -1
        exec ":!phpunit --colors " . a:filename
    elseif filereadable("script/test")
        exec ":!script/test " . a:filename
    elseif filereadable("test/mocha.opts")
        exec ":!mocha " . a:filename
    elseif filereadable("Gruntfile.js")
        exec ":!yeoman test"
    elseif filereadable("gemfile")
        exec ":!bundle exec rspec --color " . a:filename
    else
        exec ":!rspec --color " . a:filename
    end

endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    "If were in Elgg throw it all out and just launch the web page
    if filereadable("start.php")
      exec ":!open http://evoke.dev/engine/tests/suite.php"
      return
    end

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '(.feature\|_spec.\(rb\|coffee\)\|tests.\(coffee\|js\)\|Test.php)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        echo "no test to run"
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

map <leader>r :call RunTestFile()<cr>
map <leader>R :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
map <leader>w :w\|:!script/features --profile wip<cr>
map <leader>D :silent !rake db:test:prepare<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" " Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" PHP Code Sniffer standards
let g:phpcs_std_list="NatronBaxter"
let g:syntastic_phpcs_conf="--standard=NatronBaxter"

au BufRead,BufNewFile *.js.php set filetype=javascript
au BufRead,BufNewFile *.css.php set filetype=css


" Gist setup
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_show_privates = 1
let g:gist_post_private = 1

" Launch a forge project in the simulator
map <leader>f :w<CR>:!grunt sim<CR>
map <leader>F :w<CR>:!grunt droid<CR>

" Indent guidelines
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=234
hi IndentGuidesEven ctermbg=235



" https://gist.github.com/yjsoon/3485271
" Searches Dash for the word under your cursor in vim, using the keyword
" operator, based on file type. E.g. for JavaScript files, I have it
" configured to search j:term, which immediately brings up the JS doc
" for that keyword. Might need some customisation for your own keywords!
function! SearchDash()
  " Some setup
  let s:browser = "/usr/bin/open"
  let s:wordUnderCursor = expand("<cword>")

  " Get the filetype (everything after the first ., for special cases
  " such as index.html.haml or abc.css.scss.erb)
  let s:fileType = substitute(expand("%"),"^[^.]*\.","",1)

  " Alternative ways of getting filetype, aborted
  " let s:fileType = expand("%:e")
  " let s:searchType = b:current_syntax.":"

  " Match it and set the searchType -- make sure these are the right shortcuts
  " in Dash! Sort by priority in the match list below if necessary, because
  " Tilt-enabled projects may have endings like .scss.erb.
  if match(s:fileType, "js") != -1
    let s:searchType = "js:"     " can assign this to jQuery, too
  elseif match(s:fileType, "css") != -1
    let s:searchType = "css:"
  elseif match(s:fileType, "html") != -1
    let s:searchType = "html:"
  elseif match(s:fileType, "rb") != -1
    let s:searchType = "rb:"    " can assign this to Rails, too
  elseif match(s:fileType, "php") != -1
    let s:searchType = "php:"
  elseif match(s:fileType, "py") != -1
    let s:searchType = "python:"
  else
    let s:searchType = ""
  endif

  " Run it
  let s:url = "dash://".s:searchType.s:wordUnderCursor
  let s:cmd ="silent ! " . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction
map <leader>D :call SearchDash()<CR>



" Quick CoffeeScript compile
map <leader>c :CoffeeCompile vert<cr>
map <leader>C :CoffeeCompile watch vert<cr>



if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif
nmap <leader>] :TagbarToggle<Enter>
nmap <leader>} :TagbarOpenAutoClose<Enter>
