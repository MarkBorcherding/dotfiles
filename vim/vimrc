
set nocompatible                  " Must come first because it changes other options.

silent! call pathogen#runtime_append_all_bundles()

syntax on

set directory=$HOME/.vimtmp//,.  " Keep swap files in one location

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
set shell=/bin/sh

nnoremap <leader>d :NERDTreeToggle<Enter>

" Use Jamis Buck's file opening plugin FuzzyFinder
"map <leader>t :FuzzyFinderFile<Enter>
"map <leader><S-t> :FuzzyFinderTag<Enter>
"map <leader>b :FuzzyFinderBuffer<Enter>
"map <leader>] :FuzzyFinderMruFile<Enter>
"let g:fuzzy_ceiling=25000
"let g:fuzzy_ignore=".git/**/*;.svn/**/*;*.gif;*.png;*.jpg;*.log;tmp/**/*"

" Command-T
map <leader>t :CommandT<Enter>
map <leader><S-t> :CommandTFlush<Enter>:CommandT<Enter>
map <leader><c-t> :CommandTTag<Enter>
map <leader>b :CommandTBuffer<Enter>
" lets try and put the command t window at the bottom
"let g:CommandTMatchWindowAtTop=1
let g:CommandTMatchWindowReverse=1
:set wildignore+=*.o,*.obj,.git,*.png,*.jpg

set background=dark
colorscheme tir_black

set visualbell                    " No beeping.

set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs
set smarttab                      " sw at start of line, sts everywhere else
set autoindent

set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby

let Tlist_Ctags_Cmd = '/usr/local/Cellar/ctags/5.8/bin/ctags'
set tags+=gems.tags

let g:user_zen_expandabbr_key = '<c-e>'
let g:use_zen_complete_tag = 1

  " Fast window resizing with +/- keys (horizontal); / and * keys (vertical)
if bufwinnr(1)
  map <kPlus> <C-W>+
  map <kMinus> <C-W>-
  map <kDivide> <c-w><
  map <kMultiply> <c-w>>


  " Maps Alt-[h,j,k,l] to resizing a window split
  map  <A-h> <C-w><
  map  <A-j> <C-W>-
  map  <A-k> <C-W>+
  map  <A-l> <C-w>>
  " Maps Alt-[s.v] to horizontal and vertical split respectively
  map  <A-s> :split<CR>
  map  <A-v> :vsplit<CR>
  " Maps Alt-[n,p] for moving next and previous window respectively
  map  <A-n> <C-w><C-w>
  map  <A-p> <C-w><S-w>

endif


map tn :tabnew<cr>
map th :tabprevious<cr>
map tl :tabnext<cr>
map tt :tabnext <cr>
map tx :tabclose<cr>

set t_Co=256

" power line
let g:Powerline_symbols = 'fancy'

" auto remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Helpful shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>P :silent !touch tmp/restart.txt<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Running tests
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    :silent !echo;echo;echo;echo;echo;echo;echo;echo;echo;echo
    if match(a:filename, '\.feature$') != -1
        exec ":!script/features " . a:filename
    elseif match(a:filename, '\.js$') != -1
        exec ":!jasmine-headless-webkit --color " . a:filename
    else
        if filereadable("script/test")
            exec ":!script/test " . a:filename
        elseif filereadable("Gemfile")
            exec ":!bundle exec rspec --color " . a:filename
        else
            exec ":!rspec --color " . a:filename
        end
    end
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|.js\)$') != -1
    if in_test_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number . " -b")
endfunction

map <leader>r :call RunTestFile()<cr>
map <leader>R :call RunNearestTest()<cr>
map <leader>a :call RunTests('')<cr>
map <leader>c :w\|:!script/features<cr>
map <leader>w :w\|:!script/features --profile wip<cr>
map <leader>D :silent !rake db:test:prepare<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
" " Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>
" " Clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Switch between relative and absolute number
nnoremap <F3> :NumbersToggle<CR>


" Start the Corna Simulator with F3 for iPhone skin. Shift-F3 for iPad skin.
map <leader>s :!corona -project %:p -skin iPhone4<CR>
map <leader>sp :!corona -project %:p -skin iPad<CR>


"PHP Code Sniffer standards
let g:phpcs_std_list="NatronBaxter"
let g:syntastic_phpcs_conf="--standard=NatronBaxter"
